compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItemList blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier int initDeclaratorList initDeclaratorList initDeclarator declarator directDeclarator directDeclarator array [ primaryExpression 100 ] , initDeclarator declarator directDeclarator n , initDeclarator declarator directDeclarator c ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Enter number of elements in array\n" ; blockItem statement expressionStatement expression postfixExpression primaryExpression scanf argumentExpressionList primaryExpression "%d" , unaryExpression unaryOperator & primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression %d elements\n" , primaryExpression ; blockItem statement iterationStatement for forCondition expression assignmentExpression primaryExpression assignmentOperator = primaryExpression 0 ; relationalExpression primaryExpression < primaryExpression ; postfixExpression primaryExpression ++ statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression , unaryExpression unaryOperator & postfixExpression primaryExpression [ expression primaryExpression ] ; blockItem statement expressionStatement expression postfixExpression primaryExpression primaryExpression "The array elements are:\n" ; blockItem statement iterationStatement for forCondition expression assignmentExpression primaryExpression assignmentOperator = primaryExpression ; relationalExpression primaryExpression < primaryExpression ; postfixExpression primaryExpression ++ statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression "%d\n" , postfixExpression primaryExpression [ expression primaryExpression ] ; blockItem statement jumpStatement return expression primaryExpression ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 102 102 102 102 101 103 101 101 101 100 103 103 101 101 103 101 100 100 101 100 100 100 101 101 101 100 100 101 101 101 100 100 101 101 102 101 102 101 100 103 100 100 100 100 100 100 100 101 101 102 101 102 101 100 103 101 100 100 102 101 100 101 100 101 101 102 101 102 101 103 103 100 100 100 101 100 101 101 103 100 103 101 103 101 101 100 101 100 100 103 101 100 101 100 102 101 100 101 102 101 102 101 103 101 100 102 101 100 103 101 100 101 101 100 100 101 101 102 101 102 101 103 100 100 100 100 100 101 101 103 100 103 101 103 101 101 100 101 100 103 101 100 101 100 102 101 100 101 102 101 102 101 103 101 100 100 103 101 100 101 101 100 100 101 101 103 100 101 101 100 100 100 104 <EOT> 189 0 189 1 189 2 189 3 189 4 189 5 189 6 189 7 189 8 189 9 189 10 189 11 189 12 189 13 189 14 189 15 189 16 189 17 189 18 189 19 189 20 189 21 189 22 189 23 189 24 189 25 189 26 189 27 189 28 189 29 189 30 189 31 189 32 189 33 189 34 189 35 189 36 189 37 189 38 189 39 189 40 189 41 189 42 189 43 189 44 189 45 189 46 189 47 189 48 189 49 189 50 189 51 189 52 189 53 189 54 189 55 189 56 189 57 189 58 189 59 189 60 189 61 189 62 189 63 189 64 189 65 189 66 189 67 189 68 189 69 189 70 189 71 189 72 189 73 189 74 189 75 189 76 189 77 189 78 189 79 189 80 189 81 189 82 189 83 189 84 189 85 189 86 189 87 189 88 189 89 189 90 189 91 189 92 189 93 189 94 189 95 189 96 189 97 189 98 189 99 189 100 189 101 189 102 189 103 189 104 189 105 189 106 189 107 189 108 189 109 189 110 189 111 189 112 189 113 189 114 189 115 189 116 189 117 189 118 189 119 189 120 189 121 189 122 189 123 189 124 189 125 189 126 189 127 189 128 189 129 189 130 189 131 189 132 189 133 189 134 189 135 189 136 189 137 189 138 189 139 189 140 189 141 189 142 189 143 189 144 189 145 189 146 189 147 189 148 189 149 189 150 189 151 189 152 189 153 189 154 189 155 189 156 189 157 189 158 189 159 189 160 189 161 189 162 189 163 189 164 189 165 189 166 189 167 189 168 189 169 189 170 189 171 189 172 189 173 189 174 189 175 189 176 189 177 189 178 189 179 189 180 189 181 189 182 189 183 189 184 189 185 189 186 189 187 189 188 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 21 22 23 24 24 25 25 26 29 30 30 31 32 33 35 36 39 40 40 41 41 42 44 45 45 46 46 47 49 50 50 51 52 53 54 55 64 65 65 66 67 68 69 70 72 73 76 77 78 42 80 81 81 82 83 84 85 55 91 42 93 94 94 95 98 99 100 47 101 102 103 104 107 47 109 42 112 47 114 115 116 117 118 70 120 73 123 124 126 33 128 129 129 47 132 133 133 134 135 136 137 55 144 145 145 146 149 150 151 47 152 153 154 104 157 47 159 42 162 47 164 165 166 167 168 55 170 171 174 33 176 177 177 47 180 181 181 182 184 185 185 104 , 0 1 14 15 15 16 16 17 17 18 18 19 19 20 20 21 51 52 53 54 66 67 68 69 75 76 82 83 84 85 111 112 115 116 117 118 122 123 134 135 136 137 161 162 165 166 167 168 , 0 188 14 180 15 144 16 132 17 93 18 80 19 64 20 49 51 63 53 56 66 79 68 71 75 78 82 92 84 86 111 113 115 131 117 119 122 125 134 143 136 138 161 163 165 179 167 169 , 3 4 12 13 22 23 27 28 28 29 31 32 56 57 71 72 86 87 87 57 95 96 97 98 99 100 106 107 119 120 125 126 138 139 146 147 148 149 150 151 156 157 169 170 173 174 182 183 , 3 8 12 14 22 27 27 43 28 38 31 34 56 58 71 74 86 90 87 88 95 97 97 105 99 101 106 108 119 121 125 127 138 140 146 148 148 155 150 152 156 158 169 172 173 175 182 184 , 3 12 12 187 22 48 27 44 28 39 31 35 31 37 56 59 56 60 56 61 56 62 71 75 86 91 87 89 95 114 97 106 97 110 97 111 99 103 106 109 119 122 125 128 125 130 138 141 138 142 146 164 148 156 148 160 148 161 150 154 156 159 169 173 173 176 173 178 182 186 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator ( directDeclarator array ) [ ( primaryExpression 100 ) ] ) ) ) , ( initDeclarator ( declarator ( directDeclarator n ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter number of elements in array\n" ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( primaryExpression "%d" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression n ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "Enter %d elements\n" ) , ( primaryExpression n ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( forCondition ( expression ( assignmentExpression ( primaryExpression c ) ( assignmentOperator = ) ( primaryExpression 0 ) ) ) ; ( relationalExpression ( primaryExpression c ) < ( primaryExpression n ) ) ; ( postfixExpression ( primaryExpression c ) ++ ) ) ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( primaryExpression "%d" ) , ( unaryExpression ( unaryOperator & ) ( postfixExpression ( primaryExpression array ) [ ( expression ( primaryExpression c ) ) ] ) ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "The array elements are:\n" ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( forCondition ( expression ( assignmentExpression ( primaryExpression c ) ( assignmentOperator = ) ( primaryExpression 0 ) ) ) ; ( relationalExpression ( primaryExpression c ) < ( primaryExpression n ) ) ; ( postfixExpression ( primaryExpression c ) ++ ) ) ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "%d\n" ) , ( postfixExpression ( primaryExpression array ) [ ( expression ( primaryExpression c ) ) ] ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y array
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier int initDeclaratorList initDeclarator declarator directDeclarator n , initDeclarator declarator directDeclarator c ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Enter a number\n" ; blockItem statement expressionStatement expression postfixExpression primaryExpression scanf argumentExpressionList primaryExpression "%d" , unaryExpression unaryOperator & primaryExpression ; blockItem statement selectionStatement if expression equalityExpression primaryExpression == primaryExpression 2 statement expressionStatement expression postfixExpression primaryExpression primaryExpression "Prime number.\n" ; else statement compoundStatement { blockItemList blockItem statement iterationStatement for forCondition expression assignmentExpression primaryExpression assignmentOperator = primaryExpression ; relationalExpression primaryExpression <= additiveExpression primaryExpression - primaryExpression 1 ; postfixExpression primaryExpression ++ statement compoundStatement { blockItem statement selectionStatement if expression equalityExpression multiplicativeExpression primaryExpression % primaryExpression == primaryExpression 0 statement jumpStatement break ; } blockItem statement selectionStatement if expression equalityExpression primaryExpression != primaryExpression statement expressionStatement expression postfixExpression primaryExpression primaryExpression "Not prime.\n" ; else statement expressionStatement expression postfixExpression primaryExpression primaryExpression number.\n" ; } blockItem statement jumpStatement return expression primaryExpression ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 102 101 103 101 101 101 100 103 101 101 101 100 100 101 101 101 100 100 101 101 102 101 102 101 100 103 100 100 100 100 101 101 102 101 102 101 100 103 101 100 100 102 101 100 101 100 101 101 103 100 101 103 101 100 101 100 101 102 101 102 101 102 100 100 100 100 101 103 100 102 101 101 103 100 103 101 103 101 101 100 101 100 103 101 100 103 101 100 101 100 100 102 101 100 101 103 100 101 101 103 100 101 103 103 101 100 101 100 101 100 101 102 100 100 100 101 101 103 100 101 103 101 100 101 101 102 101 102 101 102 100 100 100 100 101 102 101 102 101 102 100 100 100 101 101 103 100 101 101 100 100 100 104 <EOT> 169 0 169 1 169 2 169 3 169 4 169 5 169 6 169 7 169 8 169 9 169 10 169 11 169 12 169 13 169 14 169 15 169 16 169 17 169 18 169 19 169 20 169 21 169 22 169 23 169 24 169 25 169 26 169 27 169 28 169 29 169 30 169 31 169 32 169 33 169 34 169 35 169 36 169 37 169 38 169 39 169 40 169 41 169 42 169 43 169 44 169 45 169 46 169 47 169 48 169 49 169 50 169 51 169 52 169 53 169 54 169 55 169 56 169 57 169 58 169 59 169 60 169 61 169 62 169 63 169 64 169 65 169 66 169 67 169 68 169 69 169 70 169 71 169 72 169 73 169 74 169 75 169 76 169 77 169 78 169 79 169 80 169 81 169 82 169 83 169 84 169 85 169 86 169 87 169 88 169 89 169 90 169 91 169 92 169 93 169 94 169 95 169 96 169 97 169 98 169 99 169 100 169 101 169 102 169 103 169 104 169 105 169 106 169 107 169 108 169 109 169 110 169 111 169 112 169 113 169 114 169 115 169 116 169 117 169 118 169 119 169 120 169 121 169 122 169 123 169 124 169 125 169 126 169 127 169 128 169 129 169 130 169 131 169 132 169 133 169 134 169 135 169 136 169 137 169 138 169 139 169 140 169 141 169 142 169 143 169 144 169 145 169 146 169 147 169 148 169 149 169 150 169 151 169 152 169 153 169 154 169 155 169 156 169 157 169 158 169 159 169 160 169 161 169 162 169 163 169 164 169 165 169 166 169 167 169 168 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 18 19 20 21 21 22 22 23 25 26 26 27 27 28 30 31 31 32 32 33 35 36 36 37 38 39 40 41 47 48 48 49 50 51 52 53 55 56 59 60 61 28 63 64 64 65 67 68 69 28 71 72 73 74 75 76 77 41 83 84 87 88 88 89 92 93 94 33 95 96 97 72 100 33 103 28 105 106 109 33 111 112 114 115 115 116 118 119 121 28 123 33 125 126 127 128 132 133 133 134 136 137 138 33 140 28 141 142 143 144 145 41 151 152 153 154 155 41 160 161 161 162 164 165 165 126 , 0 1 14 15 15 16 16 17 17 18 37 38 39 40 49 50 51 52 58 59 74 75 76 77 78 79 86 87 108 109 128 129 142 143 144 145 146 147 152 153 154 155 156 79 , 0 168 14 160 15 63 16 47 17 35 37 46 39 42 49 62 51 54 58 61 74 81 76 78 78 80 86 132 108 110 128 130 142 149 144 146 146 148 152 158 154 156 156 157 , 3 4 12 13 19 20 24 25 42 43 54 55 65 66 68 69 84 85 89 90 91 92 93 94 99 100 102 103 112 113 116 117 119 120 120 121 134 135 137 138 162 163 , 3 8 12 14 19 24 24 29 42 44 54 57 65 67 68 70 84 86 89 91 91 98 93 95 99 101 102 104 112 114 116 118 119 124 120 122 134 136 137 139 162 164 , 3 12 12 167 19 34 24 30 42 45 54 58 65 73 65 82 65 83 68 71 84 159 89 111 91 99 91 107 91 108 93 97 99 102 102 105 112 131 116 127 119 125 120 123 134 141 134 150 134 151 137 140 162 166 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator n ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter a number\n" ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( primaryExpression "%d" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression n ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( selectionStatement if ( expression ( equalityExpression ( primaryExpression n ) == ( primaryExpression 2 ) ) ) ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Prime number.\n" ) ) ) ; ) ) else ( statement ( compoundStatement { ( blockItemList ( blockItem ( statement ( iterationStatement for ( forCondition ( expression ( assignmentExpression ( primaryExpression c ) ( assignmentOperator = ) ( primaryExpression 2 ) ) ) ; ( relationalExpression ( primaryExpression c ) <= ( additiveExpression ( primaryExpression n ) - ( primaryExpression 1 ) ) ) ; ( postfixExpression ( primaryExpression c ) ++ ) ) ( statement ( compoundStatement { ( blockItem ( statement ( selectionStatement if ( expression ( equalityExpression ( multiplicativeExpression ( primaryExpression n ) % ( primaryExpression c ) ) == ( primaryExpression 0 ) ) ) ( statement ( jumpStatement break ; ) ) ) ) ) } ) ) ) ) ) ( blockItem ( statement ( selectionStatement if ( expression ( equalityExpression ( primaryExpression c ) != ( primaryExpression n ) ) ) ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Not prime.\n" ) ) ) ; ) ) else ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Prime number.\n" ) ) ) ; ) ) ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y check_if_an_integer_is_prime
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main parameterList parameterDeclaration declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator argc , parameterDeclaration declarationSpecifiers declarationSpecifier typeSpecifier typeSpecifier char pointer * declarator directDeclarator directDeclarator argv [ ] compoundStatement { blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier int initDeclarator declarator directDeclarator c ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf argumentExpressionList primaryExpression "Number of command line arguments passed: %d\n" , primaryExpression ; blockItem statement iterationStatement for forCondition expression assignmentExpression primaryExpression assignmentOperator = primaryExpression 0 ; relationalExpression primaryExpression < primaryExpression ; postfixExpression primaryExpression ++ statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList argumentExpressionList primaryExpression "%d argument is %s\n" , additiveExpression primaryExpression + primaryExpression 1 , postfixExpression primaryExpression [ expression primaryExpression ] ; blockItem statement jumpStatement return expression primaryExpression ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 102 101 100 103 102 101 101 101 100 101 101 100 100 102 101 101 102 101 100 101 100 101 103 101 100 100 100 103 100 102 102 102 101 103 101 101 101 100 101 101 101 100 100 101 101 102 101 102 101 100 103 103 100 100 100 100 100 100 100 100 101 100 101 101 103 100 103 101 103 101 101 100 101 100 100 103 101 100 101 100 102 101 100 101 102 101 102 101 103 103 103 100 100 100 100 100 103 101 100 101 100 100 103 101 100 101 101 100 100 101 101 103 100 101 101 100 100 100 104 <EOT> 127 0 127 1 127 2 127 3 127 4 127 5 127 6 127 7 127 8 127 9 127 10 127 11 127 12 127 13 127 14 127 15 127 16 127 17 127 18 127 19 127 20 127 21 127 22 127 23 127 24 127 25 127 26 127 27 127 28 127 29 127 30 127 31 127 32 127 33 127 34 127 35 127 36 127 37 127 38 127 39 127 40 127 41 127 42 127 43 127 44 127 45 127 46 127 47 127 48 127 49 127 50 127 51 127 52 127 53 127 54 127 55 127 56 127 57 127 58 127 59 127 60 127 61 127 62 127 63 127 64 127 65 127 66 127 67 127 68 127 69 127 70 127 71 127 72 127 73 127 74 127 75 127 76 127 77 127 78 127 79 127 80 127 81 127 82 127 83 127 84 127 85 127 86 127 87 127 88 127 89 127 90 127 91 127 92 127 93 127 94 127 95 127 96 127 97 127 98 127 99 127 100 127 101 127 102 127 103 127 104 127 105 127 106 127 107 127 108 127 109 127 110 127 111 127 112 127 113 127 114 127 115 127 116 127 117 127 118 127 119 127 120 127 121 127 122 127 123 127 124 127 125 127 126 , 1 2 2 3 4 5 5 6 6 7 8 9 10 11 14 15 15 16 16 17 18 19 19 20 23 24 24 25 26 27 28 29 30 31 32 33 41 42 43 44 44 45 45 46 47 48 48 49 49 50 52 53 53 54 55 56 57 58 69 20 71 72 72 73 76 77 78 50 79 80 81 82 85 50 87 20 90 50 92 93 94 95 96 58 106 50 108 109 112 33 114 115 115 50 118 119 119 120 122 123 123 82 , 0 1 9 10 13 14 22 23 25 26 38 39 39 40 40 41 54 55 56 57 89 90 93 94 95 96 , 0 126 9 12 13 18 22 30 25 28 38 118 39 71 40 52 54 70 56 59 89 91 93 117 95 97 , 3 4 12 13 31 32 36 37 42 43 59 60 60 61 73 74 75 76 77 78 84 85 97 98 98 99 99 100 105 106 111 112 120 121 , 3 8 12 21 31 34 36 38 42 47 59 68 60 62 73 75 75 83 77 79 84 86 97 110 98 104 99 101 105 107 111 113 120 122 , 3 36 12 22 31 35 36 125 42 51 59 69 60 63 60 64 60 65 60 66 60 67 73 92 75 84 75 88 75 89 77 81 84 87 97 111 98 105 99 102 99 103 105 108 111 114 111 116 120 124 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( parameterList ( parameterDeclaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator argc ) ) ) , ( parameterDeclaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier ( typeSpecifier char ) ( pointer * ) ) ) ) ( declarator ( directDeclarator ( directDeclarator argv ) [ ] ) ) ) ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclarator ( declarator ( directDeclarator c ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "Number of command line arguments passed: %d\n" ) , ( primaryExpression argc ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( forCondition ( expression ( assignmentExpression ( primaryExpression c ) ( assignmentOperator = ) ( primaryExpression 0 ) ) ) ; ( relationalExpression ( primaryExpression c ) < ( primaryExpression argc ) ) ; ( postfixExpression ( primaryExpression c ) ++ ) ) ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( argumentExpressionList ( primaryExpression "%d argument is %s\n" ) , ( additiveExpression ( primaryExpression c ) + ( primaryExpression 1 ) ) ) , ( postfixExpression ( primaryExpression argv ) [ ( expression ( primaryExpression c ) ) ] ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y command_line_argum
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier int initDeclaratorList initDeclaratorList initDeclaratorList initDeclaratorList initDeclarator declarator directDeclarator n , initDeclarator declarator directDeclarator first = initializer primaryExpression 0 , initDeclarator declarator directDeclarator second = initializer primaryExpression 1 , initDeclarator declarator directDeclarator next , initDeclarator declarator directDeclarator c ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Enter the number of terms\n" ; blockItem statement expressionStatement expression postfixExpression primaryExpression scanf argumentExpressionList primaryExpression "%d" , unaryExpression unaryOperator & primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression "First %d terms of Fibonacci series are:\n" , primaryExpression ; blockItem statement iterationStatement for forCondition expression assignmentExpression primaryExpression assignmentOperator = primaryExpression ; relationalExpression primaryExpression < primaryExpression ; postfixExpression primaryExpression ++ statement compoundStatement { blockItemList blockItem statement selectionStatement if expression relationalExpression primaryExpression <= primaryExpression statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = primaryExpression ; else statement compoundStatement { blockItemList blockItemList blockItem statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = additiveExpression primaryExpression + primaryExpression ; blockItem statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = primaryExpression ; blockItem statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = primaryExpression ; } blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression "%d\n" , primaryExpression ; } blockItem statement jumpStatement return expression primaryExpression ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 102 102 101 103 101 101 101 100 103 103 103 103 101 101 101 100 100 103 101 101 100 100 101 101 100 100 103 101 101 100 100 101 101 100 100 101 101 101 100 100 101 101 101 100 100 101 101 102 101 102 101 100 103 100 100 100 100 100 100 101 101 102 101 102 101 100 103 101 100 100 102 101 100 101 100 101 101 102 101 102 101 103 103 100 100 100 100 100 100 100 100 101 100 101 101 103 100 103 101 103 101 101 100 101 100 103 101 100 101 100 102 101 100 101 103 100 102 101 101 103 100 101 103 101 100 101 101 102 101 103 101 101 100 101 100 100 101 103 100 102 102 101 101 102 101 103 101 101 100 103 101 100 101 100 101 101 102 101 103 101 101 100 101 100 101 101 102 101 103 101 101 100 101 100 100 101 101 102 101 102 101 103 101 100 100 101 100 100 101 101 103 100 101 101 100 100 100 104 <EOT> 214 0 214 1 214 2 214 3 214 4 214 5 214 6 214 7 214 8 214 9 214 10 214 11 214 12 214 13 214 14 214 15 214 16 214 17 214 18 214 19 214 20 214 21 214 22 214 23 214 24 214 25 214 26 214 27 214 28 214 29 214 30 214 31 214 32 214 33 214 34 214 35 214 36 214 37 214 38 214 39 214 40 214 41 214 42 214 43 214 44 214 45 214 46 214 47 214 48 214 49 214 50 214 51 214 52 214 53 214 54 214 55 214 56 214 57 214 58 214 59 214 60 214 61 214 62 214 63 214 64 214 65 214 66 214 67 214 68 214 69 214 70 214 71 214 72 214 73 214 74 214 75 214 76 214 77 214 78 214 79 214 80 214 81 214 82 214 83 214 84 214 85 214 86 214 87 214 88 214 89 214 90 214 91 214 92 214 93 214 94 214 95 214 96 214 97 214 98 214 99 214 100 214 101 214 102 214 103 214 104 214 105 214 106 214 107 214 108 214 109 214 110 214 111 214 112 214 113 214 114 214 115 214 116 214 117 214 118 214 119 214 120 214 121 214 122 214 123 214 124 214 125 214 126 214 127 214 128 214 129 214 130 214 131 214 132 214 133 214 134 214 135 214 136 214 137 214 138 214 139 214 140 214 141 214 142 214 143 214 144 214 145 214 146 214 147 214 148 214 149 214 150 214 151 214 152 214 153 214 154 214 155 214 156 214 157 214 158 214 159 214 160 214 161 214 162 214 163 214 164 214 165 214 166 214 167 214 168 214 169 214 170 214 171 214 172 214 173 214 174 214 175 214 176 214 177 214 178 214 179 214 180 214 181 214 182 214 183 214 184 214 185 214 186 214 187 214 188 214 189 214 190 214 191 214 192 214 193 214 194 214 195 214 196 214 197 214 198 214 199 214 200 214 201 214 202 214 203 214 204 214 205 214 206 214 207 214 208 214 209 214 210 214 211 214 212 214 213 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 19 20 21 22 22 23 23 24 29 30 30 31 31 32 35 36 36 37 39 40 40 41 44 45 45 46 48 49 49 50 52 53 53 54 54 55 57 58 58 59 59 60 62 63 63 64 65 66 67 68 76 77 77 78 79 80 81 82 84 85 88 89 90 32 92 93 93 94 95 96 97 68 108 32 110 111 111 112 115 116 117 60 118 119 120 41 123 60 125 32 128 60 130 131 134 135 135 136 138 139 140 60 142 50 143 144 145 146 147 55 148 149 150 60 153 154 158 159 159 160 161 162 163 55 164 165 167 37 169 46 171 172 172 173 174 175 176 37 177 178 179 46 181 182 182 183 184 185 186 46 187 188 189 55 192 193 193 194 195 196 197 68 199 200 202 55 205 206 206 207 209 210 210 41 , 0 1 14 15 15 16 16 17 17 18 18 19 64 65 66 67 78 79 80 81 87 88 94 95 96 97 127 128 133 134 144 145 156 157 157 158 160 161 173 174 183 184 194 195 196 197 , 0 213 14 205 15 110 16 92 17 76 18 62 64 75 66 69 78 91 80 83 87 90 94 109 96 98 127 129 133 192 144 151 156 181 157 171 160 170 173 180 183 190 194 203 196 198 , 3 4 12 13 20 21 25 26 26 27 27 28 28 29 34 35 43 44 69 70 83 84 98 99 99 100 112 113 114 115 116 117 122 123 131 132 136 137 139 140 146 147 154 155 162 163 166 167 175 176 185 186 198 199 207 208 , 3 8 12 14 20 25 25 56 26 51 27 42 28 33 34 38 43 47 69 71 83 86 98 107 99 101 112 114 114 121 116 118 122 124 131 133 136 138 139 141 146 148 154 156 162 164 166 168 175 177 185 187 198 201 207 209 , 3 12 12 212 20 61 25 57 26 52 27 43 28 34 34 39 43 48 69 72 69 73 69 74 83 87 98 108 99 102 99 103 99 104 99 105 99 106 112 130 114 122 114 126 114 127 116 120 122 125 131 204 136 143 136 152 136 153 139 142 146 150 154 191 162 166 166 169 175 179 185 189 198 202 207 211 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator n ) ) ) , ( initDeclarator ( declarator ( directDeclarator first ) ) = ( initializer ( primaryExpression 0 ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator second ) ) = ( initializer ( primaryExpression 1 ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator next ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter the number of terms\n" ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( primaryExpression "%d" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression n ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "First %d terms of Fibonacci series are:\n" ) , ( primaryExpression n ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( forCondition ( expression ( assignmentExpression ( primaryExpression c ) ( assignmentOperator = ) ( primaryExpression 0 ) ) ) ; ( relationalExpression ( primaryExpression c ) < ( primaryExpression n ) ) ; ( postfixExpression ( primaryExpression c ) ++ ) ) ( statement ( compoundStatement { ( blockItemList ( blockItem ( statement ( selectionStatement if ( expression ( relationalExpression ( primaryExpression c ) <= ( primaryExpression 1 ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression next ) ( assignmentOperator = ) ( primaryExpression c ) ) ) ; ) ) else ( statement ( compoundStatement { ( blockItemList ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression next ) ( assignmentOperator = ) ( additiveExpression ( primaryExpression first ) + ( primaryExpression second ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression first ) ( assignmentOperator = ) ( primaryExpression second ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression second ) ( assignmentOperator = ) ( primaryExpression next ) ) ) ; ) ) ) ) } ) ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "%d\n" ) , ( primaryExpression next ) ) ) ) ; ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y fibonacci
compilationUnit translationUnit translationUnit translationUnit externalDeclaration declaration declarationSpecifiers declarationSpecifier typeSpecifier void initDeclarator declarator directDeclarator directDeclarator my_function ; externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Main function.\n" ; blockItem statement expressionStatement expression postfixExpression primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression primaryExpression "Back in function main.\n" ; blockItem statement jumpStatement return expression primaryExpression 0 ; } externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier void declarator directDeclarator directDeclarator compoundStatement { blockItem statement expressionStatement expression postfixExpression primaryExpression primaryExpression "Welcome to my function. Feel at home.\n" ; } <EOF> <EOT> 102 102 102 101 102 102 101 101 101 100 101 101 101 101 100 100 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 101 101 102 101 102 101 100 102 100 100 100 101 102 101 101 101 101 100 101 101 102 101 102 101 103 100 100 100 100 100 101 101 103 100 101 101 100 100 100 101 103 101 101 101 100 101 101 101 103 100 101 101 102 101 102 101 103 100 100 100 100 100 100 100 100 100 100 104 <EOT> 98 0 98 1 98 2 98 3 98 4 98 5 98 6 98 7 98 8 98 9 98 10 98 11 98 12 98 13 98 14 98 15 98 16 98 17 98 18 98 19 98 20 98 21 98 22 98 23 98 24 98 25 98 26 98 27 98 28 98 29 98 30 98 31 98 32 98 33 98 34 98 35 98 36 98 37 98 38 98 39 98 40 98 41 98 42 98 43 98 44 98 45 98 46 98 47 98 48 98 49 98 50 98 51 98 52 98 53 98 54 98 55 98 56 98 57 98 58 98 59 98 60 98 61 98 62 98 63 98 64 98 65 98 66 98 67 98 68 98 69 98 70 98 71 98 72 98 73 98 74 98 75 98 76 98 77 98 78 98 79 98 80 98 81 98 82 98 83 98 84 98 85 98 86 98 87 98 88 98 89 98 90 98 91 98 92 98 93 98 94 98 95 98 96 98 97 , 3 4 6 7 7 8 8 9 10 11 11 12 12 13 13 14 16 17 18 19 19 20 20 21 22 23 23 24 24 25 31 32 32 33 34 35 36 37 42 43 44 45 45 46 46 47 47 14 49 50 50 51 52 53 54 37 61 62 62 63 65 66 66 67 70 71 72 73 73 74 74 75 76 77 77 78 78 14 81 82 82 83 84 85 86 37 , 0 1 1 2 2 3 4 5 5 6 28 29 29 30 30 31 33 34 35 36 38 39 43 44 51 52 53 54 83 84 85 86 , 0 97 1 70 2 16 4 15 5 10 28 61 29 49 30 42 33 41 35 38 38 40 43 48 51 60 53 55 83 95 85 87 , 17 18 26 27 55 56 63 64 71 72 79 80 87 88 , 17 22 26 28 55 57 63 65 71 76 79 81 87 89 , 17 26 26 69 55 58 55 59 63 68 71 79 79 96 87 90 87 91 87 92 87 93 87 94 X ( compilationUnit ( translationUnit ( translationUnit ( translationUnit ( externalDeclaration ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier void ) ) ) ( initDeclarator ( declarator ( directDeclarator ( directDeclarator my_function ) ( ) ) ) ) ; ) ) ) ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Main function.\n" ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression my_function ) ( ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Back in function main.\n" ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier void ) ) ) ( declarator ( directDeclarator ( directDeclarator my_function ) ( ) ) ) ( compoundStatement { ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Welcome to my function. Feel at home.\n" ) ) ) ; ) ) ) } ) ) ) ) <EOF> ) Y function_program
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Hello, World!" ; blockItem statement jumpStatement return expression primaryExpression 0 ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 101 101 102 101 102 101 100 102 100 100 100 101 101 103 100 101 101 100 100 100 100 104 <EOT> 36 0 36 1 36 2 36 3 36 4 36 5 36 6 36 7 36 8 36 9 36 10 36 11 36 12 36 13 36 14 36 15 36 16 36 17 36 18 36 19 36 20 36 21 36 22 36 23 36 24 36 25 36 26 36 27 36 28 36 29 36 30 36 31 36 32 36 33 36 34 36 35 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 15 16 16 17 18 19 20 21 26 27 27 28 30 31 31 32 , 0 1 14 15 17 18 19 20 22 23 , 0 35 14 26 17 25 19 22 22 24 , 3 4 12 13 28 29 , 3 8 12 14 28 30 , 3 12 12 34 28 33 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Hello, World!" ) ) ) ; ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y helloworld
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier int initDeclarator declarator directDeclarator n ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Enter a number\n" ; blockItem statement expressionStatement expression postfixExpression primaryExpression scanf argumentExpressionList primaryExpression "%d" , unaryExpression unaryOperator & primaryExpression ; blockItem statement selectionStatement if expression relationalExpression primaryExpression > primaryExpression 0 statement expressionStatement expression postfixExpression primaryExpression primaryExpression "Greater than zero.\n" ; else statement expressionStatement expression postfixExpression primaryExpression primaryExpression "Less than or equal to zero.\n" ; blockItem statement jumpStatement return expression primaryExpression ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 102 101 103 101 101 101 100 101 101 101 100 100 101 101 102 101 102 101 100 103 100 100 100 100 101 101 102 101 102 101 100 103 101 100 100 102 101 100 101 100 101 101 103 100 101 103 101 100 101 100 101 102 101 102 101 103 100 100 100 100 100 101 102 101 102 101 103 100 100 100 100 100 100 100 101 101 103 100 101 101 100 100 100 104 <EOT> 100 0 100 1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 23 100 24 100 25 100 26 100 27 100 28 100 29 100 30 100 31 100 32 100 33 100 34 100 35 100 36 100 37 100 38 100 39 100 40 100 41 100 42 100 43 100 44 100 45 100 46 100 47 100 48 100 49 100 50 100 51 100 52 100 53 100 54 100 55 100 56 100 57 100 58 100 59 100 60 100 61 100 62 100 63 100 64 100 65 100 66 100 67 100 68 100 69 100 70 100 71 100 72 100 73 100 74 100 75 100 76 100 77 100 78 100 79 100 80 100 81 100 82 100 83 100 84 100 85 100 86 100 87 100 88 100 89 100 90 100 91 100 92 100 93 100 94 100 95 100 96 100 97 100 98 100 99 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 18 19 20 21 21 22 22 23 24 25 25 26 26 27 29 30 30 31 32 33 34 35 41 42 42 43 44 45 46 47 49 50 53 54 55 27 57 58 58 59 61 62 63 27 65 66 67 68 69 70 71 35 78 79 80 81 82 35 91 92 92 93 95 96 96 66 , 0 1 14 15 15 16 16 17 17 18 31 32 33 34 43 44 45 46 52 53 68 69 70 71 79 80 81 82 , 0 99 14 91 15 57 16 41 17 29 31 40 33 36 43 56 45 48 52 55 68 76 70 72 79 90 81 83 , 3 4 12 13 19 20 36 37 48 49 59 60 62 63 72 73 83 84 93 94 , 3 8 12 14 19 24 36 38 48 51 59 61 62 64 72 74 83 85 93 95 , 3 12 12 98 19 28 36 39 48 52 59 67 59 77 59 78 62 65 72 75 83 86 83 87 83 88 83 89 93 97 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclarator ( declarator ( directDeclarator n ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter a number\n" ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( primaryExpression "%d" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression n ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( selectionStatement if ( expression ( relationalExpression ( primaryExpression n ) > ( primaryExpression 0 ) ) ) ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Greater than zero.\n" ) ) ) ; ) ) else ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Less than or equal to zero.\n" ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y if_and_else_instr
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier double initDeclaratorList initDeclaratorList initDeclarator declarator directDeclarator a , initDeclarator declarator directDeclarator b , initDeclarator declarator directDeclarator product ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Enter two numbers: " ; blockItem statement expressionStatement expression postfixExpression primaryExpression scanf argumentExpressionList argumentExpressionList primaryExpression "%lf %lf" , unaryExpression unaryOperator & primaryExpression , unaryExpression unaryOperator & primaryExpression ; blockItem statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = multiplicativeExpression primaryExpression * primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression "Product = %.2lf" , primaryExpression ; blockItem statement jumpStatement return expression primaryExpression 0 ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 102 102 101 103 101 101 101 100 103 103 101 101 101 100 100 101 101 101 100 100 101 101 101 100 100 101 101 102 101 102 101 100 103 100 100 100 100 100 101 101 102 101 102 101 100 103 103 102 100 100 100 102 101 100 101 100 102 101 100 101 100 101 101 102 101 103 101 101 100 103 101 100 101 100 101 101 102 101 102 101 103 103 100 100 100 100 101 100 101 101 103 100 101 101 100 100 100 100 104 <EOT> 115 0 115 1 115 2 115 3 115 4 115 5 115 6 115 7 115 8 115 9 115 10 115 11 115 12 115 13 115 14 115 15 115 16 115 17 115 18 115 19 115 20 115 21 115 22 115 23 115 24 115 25 115 26 115 27 115 28 115 29 115 30 115 31 115 32 115 33 115 34 115 35 115 36 115 37 115 38 115 39 115 40 115 41 115 42 115 43 115 44 115 45 115 46 115 47 115 48 115 49 115 50 115 51 115 52 115 53 115 54 115 55 115 56 115 57 115 58 115 59 115 60 115 61 115 62 115 63 115 64 115 65 115 66 115 67 115 68 115 69 115 70 115 71 115 72 115 73 115 74 115 75 115 76 115 77 115 78 115 79 115 80 115 81 115 82 115 83 115 84 115 85 115 86 115 87 115 88 115 89 115 90 115 91 115 92 115 93 115 94 115 95 115 96 115 97 115 98 115 99 115 100 115 101 115 102 115 103 115 104 115 105 115 106 115 107 115 108 115 109 115 110 115 111 115 112 115 113 115 114 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 19 20 21 22 22 23 23 24 27 28 28 29 29 30 32 33 33 34 34 35 37 38 38 39 39 40 42 43 43 44 45 46 47 48 55 56 56 57 58 59 60 61 69 70 71 30 74 75 76 35 78 79 79 80 81 82 83 40 84 85 87 30 89 35 91 92 92 93 94 95 96 48 103 40 105 106 106 107 109 110 110 111 , 0 1 14 15 15 16 16 17 17 18 18 19 44 45 46 47 57 58 59 60 64 65 68 69 73 74 80 81 93 94 95 96 , 0 114 14 105 15 91 16 78 17 55 18 42 44 54 46 49 57 77 59 62 64 66 68 71 73 76 80 90 93 104 95 97 , 3 4 12 13 20 21 25 26 26 27 49 50 62 63 63 64 82 83 86 87 97 98 98 99 107 108 , 3 8 12 14 20 25 25 36 26 31 49 51 62 72 63 67 82 84 86 88 97 102 98 100 107 109 , 3 12 12 113 20 41 25 37 26 32 49 52 49 53 62 73 63 68 82 86 86 89 97 103 98 101 107 112 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier double ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator a ) ) ) , ( initDeclarator ( declarator ( directDeclarator b ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator product ) ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter two numbers: " ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( argumentExpressionList ( primaryExpression "%lf %lf" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression a ) ) ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression b ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression product ) ( assignmentOperator = ) ( multiplicativeExpression ( primaryExpression a ) * ( primaryExpression b ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "Product = %.2lf" ) , ( primaryExpression product ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y multiply_two_floating_point
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItemList blockItemList blockItemList blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier int initDeclaratorList initDeclaratorList initDeclaratorList initDeclarator declarator directDeclarator dividend , initDeclarator declarator directDeclarator divisor , initDeclarator declarator directDeclarator quotient , initDeclarator declarator directDeclarator remainder ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Enter dividend: " ; blockItem statement expressionStatement expression postfixExpression primaryExpression scanf argumentExpressionList primaryExpression "%d" , unaryExpression unaryOperator & primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression primaryExpression divisor: " ; blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression , unaryExpression unaryOperator & primaryExpression ; blockItem statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = multiplicativeExpression primaryExpression / primaryExpression ; blockItem statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = multiplicativeExpression primaryExpression % primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression "Quotient = %d\n" , primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList primaryExpression "Remainder = %d" , primaryExpression ; blockItem statement jumpStatement return expression primaryExpression 0 ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 102 102 102 102 102 102 101 103 101 101 101 100 103 103 103 101 101 101 100 100 101 101 101 100 100 101 101 101 100 100 101 101 101 100 100 101 101 102 101 102 101 100 103 100 100 100 100 101 101 102 101 102 101 100 103 101 100 100 102 101 100 101 100 101 101 102 101 102 101 103 100 100 100 101 101 102 101 102 101 103 101 100 102 101 100 101 100 101 101 102 101 103 101 101 100 103 101 100 101 100 101 101 102 101 103 101 101 100 103 101 100 101 100 101 101 102 101 102 101 103 103 100 100 100 100 101 100 101 101 102 101 102 101 103 103 100 100 100 100 101 100 101 101 103 100 101 101 100 100 100 100 104 <EOT> 168 0 168 1 168 2 168 3 168 4 168 5 168 6 168 7 168 8 168 9 168 10 168 11 168 12 168 13 168 14 168 15 168 16 168 17 168 18 168 19 168 20 168 21 168 22 168 23 168 24 168 25 168 26 168 27 168 28 168 29 168 30 168 31 168 32 168 33 168 34 168 35 168 36 168 37 168 38 168 39 168 40 168 41 168 42 168 43 168 44 168 45 168 46 168 47 168 48 168 49 168 50 168 51 168 52 168 53 168 54 168 55 168 56 168 57 168 58 168 59 168 60 168 61 168 62 168 63 168 64 168 65 168 66 168 67 168 68 168 69 168 70 168 71 168 72 168 73 168 74 168 75 168 76 168 77 168 78 168 79 168 80 168 81 168 82 168 83 168 84 168 85 168 86 168 87 168 88 168 89 168 90 168 91 168 92 168 93 168 94 168 95 168 96 168 97 168 98 168 99 168 100 168 101 168 102 168 103 168 104 168 105 168 106 168 107 168 108 168 109 168 110 168 111 168 112 168 113 168 114 168 115 168 116 168 117 168 118 168 119 168 120 168 121 168 122 168 123 168 124 168 125 168 126 168 127 168 128 168 129 168 130 168 131 168 132 168 133 168 134 168 135 168 136 168 137 168 138 168 139 168 140 168 141 168 142 168 143 168 144 168 145 168 146 168 147 168 148 168 149 168 150 168 151 168 152 168 153 168 154 168 155 168 156 168 157 168 158 168 159 168 160 168 161 168 162 168 163 168 164 168 165 168 166 168 167 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 23 24 25 26 26 27 27 28 32 33 33 34 34 35 37 38 38 39 39 40 42 43 43 44 44 45 47 48 48 49 49 50 52 53 53 54 55 56 57 58 64 65 65 66 67 68 69 70 72 73 76 77 78 35 80 81 81 82 83 84 85 58 90 91 91 92 93 94 95 70 97 73 100 101 102 40 104 105 105 106 107 108 109 45 110 111 113 35 115 40 117 118 118 119 120 121 122 50 123 124 126 35 128 40 130 131 131 132 133 134 135 58 142 45 144 145 145 146 147 148 149 58 156 50 158 159 159 160 162 163 163 164 , 0 1 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 54 55 56 57 66 67 68 69 75 76 82 83 84 85 92 93 94 95 99 100 106 107 119 120 132 133 134 135 146 147 148 149 , 0 167 14 158 15 144 16 130 17 117 18 104 19 90 20 80 21 64 22 52 54 63 56 59 66 79 68 71 75 78 82 89 84 86 92 103 94 96 99 102 106 116 119 129 132 143 134 136 146 157 148 150 , 3 4 12 13 24 25 29 30 30 31 31 32 59 60 71 72 86 60 96 97 108 109 112 113 121 122 125 126 136 137 137 138 150 151 151 152 160 161 , 3 8 12 14 24 29 29 46 30 41 31 36 59 61 71 74 86 87 96 98 108 110 112 114 121 123 125 127 136 141 137 139 150 155 151 153 160 162 , 3 12 12 166 24 51 29 47 30 42 31 37 59 62 71 75 86 88 96 99 108 112 112 115 121 125 125 128 136 142 137 140 150 156 151 154 160 165 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator dividend ) ) ) , ( initDeclarator ( declarator ( directDeclarator divisor ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator quotient ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator remainder ) ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter dividend: " ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( primaryExpression "%d" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression dividend ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter divisor: " ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( primaryExpression "%d" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression divisor ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression quotient ) ( assignmentOperator = ) ( multiplicativeExpression ( primaryExpression dividend ) / ( primaryExpression divisor ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression remainder ) ( assignmentOperator = ) ( multiplicativeExpression ( primaryExpression dividend ) % ( primaryExpression divisor ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "Quotient = %d\n" ) , ( primaryExpression quotient ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( primaryExpression "Remainder = %d" ) , ( primaryExpression remainder ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y quot_and_rem
compilationUnit translationUnit externalDeclaration functionDefinition declarationSpecifiers declarationSpecifier typeSpecifier int declarator directDeclarator directDeclarator main compoundStatement { blockItemList blockItemList blockItemList blockItemList blockItemList blockItem declaration declarationSpecifiers declarationSpecifier typeSpecifier int initDeclaratorList initDeclaratorList initDeclarator declarator directDeclarator number1 , initDeclarator declarator directDeclarator number2 , initDeclarator declarator directDeclarator sum ; blockItem statement expressionStatement expression postfixExpression primaryExpression printf primaryExpression "Enter two integers: " ; blockItem statement expressionStatement expression postfixExpression primaryExpression scanf argumentExpressionList argumentExpressionList primaryExpression "%d %d" , unaryExpression unaryOperator & primaryExpression , unaryExpression unaryOperator & primaryExpression ; blockItem statement expressionStatement expression assignmentExpression primaryExpression assignmentOperator = additiveExpression primaryExpression + primaryExpression ; blockItem statement expressionStatement expression postfixExpression primaryExpression argumentExpressionList argumentExpressionList argumentExpressionList primaryExpression + %d = %d" , primaryExpression , primaryExpression , primaryExpression ; blockItem statement jumpStatement return expression primaryExpression 0 ; } <EOF> <EOT> 102 101 101 103 101 101 101 100 101 101 101 100 103 100 102 102 102 102 102 101 103 101 101 101 100 103 103 101 101 101 100 100 101 101 101 100 100 101 101 101 100 100 101 101 102 101 102 101 100 103 100 100 100 100 100 101 101 102 101 102 101 100 103 103 102 100 100 100 102 101 100 101 100 102 101 100 101 100 101 101 102 101 103 101 101 100 103 101 100 101 100 101 101 102 101 102 101 103 103 103 103 100 100 100 100 100 101 100 101 100 101 100 101 101 103 100 101 101 100 100 100 100 104 <EOT> 122 0 122 1 122 2 122 3 122 4 122 5 122 6 122 7 122 8 122 9 122 10 122 11 122 12 122 13 122 14 122 15 122 16 122 17 122 18 122 19 122 20 122 21 122 22 122 23 122 24 122 25 122 26 122 27 122 28 122 29 122 30 122 31 122 32 122 33 122 34 122 35 122 36 122 37 122 38 122 39 122 40 122 41 122 42 122 43 122 44 122 45 122 46 122 47 122 48 122 49 122 50 122 51 122 52 122 53 122 54 122 55 122 56 122 57 122 58 122 59 122 60 122 61 122 62 122 63 122 64 122 65 122 66 122 67 122 68 122 69 122 70 122 71 122 72 122 73 122 74 122 75 122 76 122 77 122 78 122 79 122 80 122 81 122 82 122 83 122 84 122 85 122 86 122 87 122 88 122 89 122 90 122 91 122 92 122 93 122 94 122 95 122 96 122 97 122 98 122 99 122 100 122 101 122 102 122 103 122 104 122 105 122 106 122 107 122 108 122 109 122 110 122 111 122 112 122 113 122 114 122 115 122 116 122 117 122 118 122 119 122 120 122 121 , 1 2 2 3 4 5 5 6 6 7 8 9 9 10 10 11 19 20 21 22 22 23 23 24 27 28 28 29 29 30 32 33 33 34 34 35 37 38 38 39 39 40 42 43 43 44 45 46 47 48 55 56 56 57 58 59 60 61 69 70 71 30 74 75 76 35 78 79 79 80 81 82 83 40 84 85 87 30 89 35 91 92 92 93 94 95 96 48 106 30 108 35 110 40 112 113 113 114 116 117 117 118 , 0 1 14 15 15 16 16 17 17 18 18 19 44 45 46 47 57 58 59 60 64 65 68 69 73 74 80 81 93 94 95 96 , 0 121 14 112 15 91 16 78 17 55 18 42 44 54 46 49 57 77 59 62 64 66 68 71 73 76 80 90 93 111 95 97 , 3 4 12 13 20 21 25 26 26 27 49 50 62 63 63 64 82 83 86 87 97 98 98 99 99 100 100 65 114 115 , 3 8 12 14 20 25 25 36 26 31 49 51 62 72 63 67 82 84 86 88 97 109 98 107 99 105 100 101 114 116 , 3 12 12 120 20 41 25 37 26 32 49 52 49 53 62 73 63 68 82 86 86 89 97 110 98 108 99 106 100 102 100 103 100 104 114 119 X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator number1 ) ) ) , ( initDeclarator ( declarator ( directDeclarator number2 ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator sum ) ) ) ) ; ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( primaryExpression "Enter two integers: " ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression scanf ) ( argumentExpressionList ( argumentExpressionList ( primaryExpression "%d %d" ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression number1 ) ) ) , ( unaryExpression ( unaryOperator & ) ( primaryExpression number2 ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( primaryExpression sum ) ( assignmentOperator = ) ( additiveExpression ( primaryExpression number1 ) + ( primaryExpression number2 ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( postfixExpression ( primaryExpression printf ) ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( primaryExpression "%d + %d = %d" ) , ( primaryExpression number1 ) ) , ( primaryExpression number2 ) ) , ( primaryExpression sum ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( primaryExpression 0 ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y sumtwonumbers
