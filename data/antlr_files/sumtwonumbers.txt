( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) (   ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator number1 ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator number2 ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator sum ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter two integers: " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) (  ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d %d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression sum ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number1 ) ) ) ) ) ) + ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d + %d = %d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression sum ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> )
