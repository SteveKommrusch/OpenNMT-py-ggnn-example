( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) (   ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator ( directDeclarator array ) [ ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 100 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator n ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter number of elements in array\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) (  ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter %d elements\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for (  ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) < ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) (  ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression array ) ) [ ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "The array elements are:\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for (  ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) < ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression array ) ) [ ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> )
