( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) (   ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator n ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter a number\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) (  ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( selectionStatement if (  ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) == ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Prime number.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) else ( statement ( compoundStatement { ( blockItemList ( blockItemList ( blockItem ( statement ( iterationStatement for (  ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) <= ( shiftExpression ( additiveExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) - ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ( statement ( compoundStatement { ( blockItemList ( blockItem ( statement ( selectionStatement if (  ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) % ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) == ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ( statement ( jumpStatement break ; ) ) ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( selectionStatement if (  ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) != ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Not prime.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) else ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Prime number.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> )
