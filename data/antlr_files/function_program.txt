( compilationUnit ( translationUnit ( translationUnit ( translationUnit ( externalDeclaration ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier void ) ) ) ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator ( directDeclarator my_function ) (   ) ) ) ) ) ; ) ) ) ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) (   ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Main function.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression my_function ) ) (   ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Back in function main.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier void ) ) ) ( declarator ( directDeclarator ( directDeclarator my_function ) (   ) ) ) ( compoundStatement { ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) (  ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Welcome to my function. Feel at home.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> )
