X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator ( directDeclarator array ) [ ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 100 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator n ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter number of elements in array\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter %d elements\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) < ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression array ) ) [ ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "The array elements are:\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) < ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression array ) ) [ ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y array
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator n ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter a number\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( selectionStatement if ( ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) == ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Prime number.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) else ( statement ( compoundStatement { ( blockItemList ( blockItemList ( blockItem ( statement ( iterationStatement for ( ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) <= ( shiftExpression ( additiveExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) - ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( compoundStatement { ( blockItemList ( blockItem ( statement ( selectionStatement if ( ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) % ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) == ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( jumpStatement break ; ) ) ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( selectionStatement if ( ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) != ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Not prime.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) else ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Prime number.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y check_if_an_integer_is_prime
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ( parameterTypeList ( parameterList ( parameterList ( parameterDeclaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator argc ) ) ) ) , ( parameterDeclaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier ( typeSpecifier char ) ( pointer * ) ) ) ) ( declarator ( directDeclarator ( directDeclarator argv ) [ ] ) ) ) ) ) ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Number of command line arguments passed: %d\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression argc ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) < ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression argc ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d argument is %s\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) + ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression argv ) ) [ ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y command_line_argum
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator n ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator first ) ) = ( initializer ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator second ) ) = ( initializer ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator next ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator c ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter the number of terms\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "First %d terms of Fibonacci series are:\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( iterationStatement for ( ( forCondition ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) < ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ( forExpression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression c ) ) ++ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( compoundStatement { ( blockItemList ( blockItemList ( blockItem ( statement ( selectionStatement if ( ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) <= ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression next ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression c ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) else ( statement ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression next ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression first ) ) ) ) ) ) + ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression second ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression first ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression second ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression second ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression next ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression next ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y fibonacci
X ( compilationUnit ( translationUnit ( translationUnit ( translationUnit ( externalDeclaration ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier void ) ) ) ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator ( directDeclarator my_function ) ( ) ) ) ) ) ; ) ) ) ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Main function.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression my_function ) ) ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Back in function main.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier void ) ) ) ( declarator ( directDeclarator ( directDeclarator my_function ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Welcome to my function. Feel at home.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y function_program
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Hello, World!" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y helloworld
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator n ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter a number\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( selectionStatement if ( ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression n ) ) ) ) ) ) ) ) > ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Greater than zero.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) else ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Less than or equal to zero.\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y if_and_else_instr
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier double ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator a ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator b ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator product ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter two numbers: " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%lf %lf" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression a ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression b ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression product ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression a ) ) ) ) ) * ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression b ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Product = %.2lf" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression product ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y multiply_two_floating_point
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator dividend ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator divisor ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator quotient ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator remainder ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter dividend: " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression dividend ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter divisor: " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression divisor ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression quotient ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression dividend ) ) ) ) ) / ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression divisor ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression remainder ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression dividend ) ) ) ) ) % ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression divisor ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Quotient = %d\n" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression quotient ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Remainder = %d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression remainder ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y quot_and_rem
X ( compilationUnit ( translationUnit ( externalDeclaration ( functionDefinition ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( declarator ( directDeclarator ( directDeclarator main ) ( ) ) ) ( compoundStatement { ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItemList ( blockItem ( declaration ( declarationSpecifiers ( declarationSpecifier ( typeSpecifier int ) ) ) ( initDeclaratorList ( initDeclaratorList ( initDeclaratorList ( initDeclarator ( declarator ( directDeclarator number1 ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator number2 ) ) ) ) , ( initDeclarator ( declarator ( directDeclarator sum ) ) ) ) ; ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "Enter two integers: " ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression scanf ) ) ( ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d %d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( unaryOperator & ) ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( unaryExpression ( postfixExpression ( primaryExpression sum ) ) ) ( assignmentOperator = ) ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number1 ) ) ) ) ) ) + ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( expressionStatement ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( postfixExpression ( primaryExpression printf ) ) ( ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( argumentExpressionList ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression "%d + %d = %d" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression number2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression sum ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) ( blockItem ( statement ( jumpStatement return ( expression ( assignmentExpression ( conditionalExpression ( logicalOrExpression ( logicalAndExpression ( inclusiveOrExpression ( exclusiveOrExpression ( andExpression ( equalityExpression ( relationalExpression ( shiftExpression ( additiveExpression ( multiplicativeExpression ( castExpression ( unaryExpression ( postfixExpression ( primaryExpression 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ) ) ) ) } ) ) ) ) <EOF> ) Y sumtwonumbers
